from keras.datasets import mnist
#%%
import numpy as np
from sklearn import svm
from matplotlib import pyplot as plt
from sklearn.metrics import confusion_matrix
import keras
#%%
(train_X, train_y), (test_X, test_y) = mnist.load_data()
#%%
plt.imshow(train_X[2])
plt.show()
# %%
#code for SVM training
#first flatten train and test 2d arrays into 1d array
flatten_train_X=train_X.reshape(train_X.shape[0],-1)
flatten_test_X=test_X.reshape(test_X.shape[0],-1)

print(flatten_train_X.shape)
# %%
svm_model=svm.SVC()
svm_model.fit(flatten_train_X, train_y)
# %%
predictions=svm_model.predict(flatten_test_X)
# %%
results=confusion_matrix(test_y, predictions)
print(results)
# %%

model = keras.models.Sequential([keras.layers.Flatten(input_shape = [28, 28]),
keras.layers.Dense(300, activation = “relu” ),
keras.layers.Dense(100, activation = “relu” ),
keras.layers.Dense(100, activation = “relu” ),
keras.layers.Dense(100, activation = “relu” ),
keras.layers.Dense(10, activation = “softmax” )])
